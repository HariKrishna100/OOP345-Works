/*
*****************************************************************************
                          w2p2
Full Name  : Harikrishna Paresh Patel
Student ID#: 150739217
Email      : Hpatel296@myseneca.ca
Section    : NCC
Date       : 1/28/2022
Authenticity Declaration:
I have done all the coding by myself and only copied the code that my professor
provided to complete my workshops and assignments.
*****************************************************************************
*/

in this workshop I learnt how to impliment the move semantics by defining move 
constructor and move operator and verified the time diffrence for Copy assignemnt
against move semeantics.

The reason for the significatnt diffrence in time is due to the numerous process taking
place copy the data lets breakdown whats going on copy construction process. In order to 
make a copy we measure the size of data from the instance we are copying from then we move 
all the information from the other one and make the new instance point to the copy we made
as follows:

ProteinDatabase::ProteinDatabase(const ProteinDatabase& toCopy) {
      operator=(toCopy);
   }

   ProteinDatabase& ProteinDatabase::operator=(const ProteinDatabase& toCopy) {
      if (this != &toCopy) {
         delete[] m_proteinSeqArr;
         m_proteinSeqArr = nullptr;

         m_noOfStr = toCopy.m_noOfStr;

         m_proteinSeqArr = new string[toCopy.m_noOfStr + 1];
         for (int i = 0; i < toCopy.m_noOfStr; i++) {
            m_proteinSeqArr[i] = toCopy.m_proteinSeqArr[i];
         }
      }
      return *this;
   }

We get the size of string length then we assign to the new instance the data from the 
existing and move all information and make it point to the new m_proteinSeqArr. Copy 
assignment means we have a object and that object is pointing to somewhere and another 
object of same type pointing somewhere else in memory and before the object existed we 
delete the memory of the other object because its existed and then copy the other object 
to anoter part of memory then make thge new object point there. this is quite long process.

doing move means we make the new object point to the data of the instance we are copying from
and then we savour the connection between the old object and this speeds up the application speed
tremendously as we don't create more objects and no need to delete the old again instead we killed the connection to the old 
object pointing to its memory and its memory is held by new object.

   ProteinDatabase::ProteinDatabase(ProteinDatabase&& toMove) noexcept {
      operator=(move(toMove));
   }

   ProteinDatabase& ProteinDatabase::operator=(ProteinDatabase&& toMove) noexcept {
      if (this != &toMove) {
         delete[] m_proteinSeqArr;
         m_proteinSeqArr = toMove.m_proteinSeqArr;
         toMove.m_proteinSeqArr = nullptr;

         m_noOfStr = toMove.m_noOfStr;
         toMove.m_noOfStr = 0;
      }
      return *this;
   }  